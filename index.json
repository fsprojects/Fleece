[{"uri":"/Fleece/codec.html","title":"codec","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: System.Json, 4.7.1\u0022\n#r \u0022nuget: FSharpPlus, 1.2.2\u0022\n#r @\u0022../../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n\n\n(**\n\n## CODEC\n\n\u0060\u0060\u0060f#\n#r \u0022nuget: Fleece.SystemJson\u0022\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n\u0060\u0060\u0060\n\nFor types that deserialize to Json Objets, typically (but not limited to) records, you can alternatively use codecs and have a single method which maps between fields and values.\n*)\n\ntype Person = {\n    name : string * string\n    age : int option\n    children: Person list }\n    with\n    static member JsonObjCodec =\n        fun f l a c -\u003E { name = (f, l); age = a; children = c }\n        \u003C!\u003E jreq  \u0022firstName\u0022 (Some \u003C\u003C fun x -\u003E fst x.name)\n        \u003C*\u003E jreq  \u0022lastName\u0022  (Some \u003C\u003C fun x -\u003E snd x.name)\n        \u003C*\u003E jopt  \u0022age\u0022       (fun x -\u003E x.age) // Optional fields: use \u0027jopt\u0027\n        \u003C*\u003E jreq  \u0022children\u0022  (fun x -\u003E Some x.children)\n\n\nlet p = {name = (\u0022John\u0022, \u0022Doe\u0022); age = None; children = [{name = (\u0022Johnny\u0022, \u0022Doe\u0022); age = Some 21; children = []}]}\n//printfn \u0022%s\u0022 (string (toJson p))\n\nlet john = parseJson\u003CPerson\u003E \u0022\u0022\u0022{\n    \u0022children\u0022: [{\n        \u0022children\u0022: [],\n        \u0022age\u0022: 21,\n        \u0022lastName\u0022: \u0022Doe\u0022,\n        \u0022firstName\u0022: \u0022Johnny\u0022\n    }],\n    \u0022lastName\u0022: \u0022Doe\u0022,\n    \u0022firstName\u0022: \u0022John\u0022\n}\u0022\u0022\u0022\n\n(**\nIf you prefer you can write the same with functions:\n*)\n\ntype PersonF = {\n    name : string * string\n    age : int option\n    children: PersonF list }\n    with\n    static member JsonObjCodec =\n        fun f l a c -\u003E { name = (f, l); age = a; children = c }\n        |\u003E withFields\n        |\u003E jfield    \u0022firstName\u0022 (fun x -\u003E fst x.name)\n        |\u003E jfield    \u0022lastName\u0022  (fun x -\u003E snd x.name)\n        |\u003E jfieldOpt \u0022age\u0022       (fun x -\u003E x.age)\n        |\u003E jfieldWith jsonValueCodec \u0022children\u0022  (fun x -\u003E x.children)\n\n(**\nBoth approaches build a codec from the same pieces:\n\n- A constructor function that builds a new record from deserialized pieces\n- A sequence of field specifications with \u0060jfield/jfieldOpt\u0060 or \u0060jreq/jot\u0060.\n  These specs take a field name and a function for getting that fields value from a record instance.\n\nDiscriminated unions can be modeled with alternatives:\n*)\n\ntype Shape =\n    | Rectangle of width : float * length : float\n    | Circle of radius : float\n    | Prism of width : float * float * height : float\n    with\n        static member JsonObjCodec =\n            Rectangle \u003C!\u003E jreq \u0022rectangle\u0022 (function Rectangle (x, y) -\u003E Some (x, y) | _ -\u003E None)\n            \u003C|\u003E ( Circle \u003C!\u003E jreq \u0022radius\u0022 (function Circle x -\u003E Some x | _ -\u003E None) )\n            \u003C|\u003E ( Prism \u003C!\u003E jreq \u0022prism\u0022   (function Prism (x, y, z) -\u003E Some (x, y, z) | _ -\u003E None) )\n(**\nor using the jchoice combinator:\n*)\n\ntype ShapeC =\n    | Rectangle of width : float * length : float\n    | Circle of radius : float\n    | Prism of width : float * float * height : float\n    with\n        static member JsonObjCodec =\n            jchoice\n                [\n                    Rectangle \u003C!\u003E jreq \u0022rectangle\u0022 (function Rectangle (x, y) -\u003E Some (x, y) | _ -\u003E None)\n                    Circle    \u003C!\u003E jreq \u0022radius\u0022    (function Circle x -\u003E Some x | _ -\u003E None)\n                    Prism     \u003C!\u003E jreq \u0022prism\u0022     (function Prism (x, y, z) -\u003E Some (x, y, z) | _ -\u003E None)\n                ]\n\n(**\nWhat\u0027s happening here is that we\u0027re getting a Codec to/from a Json Object (not neccesarily a JsonValue) which Fleece is able to take it and fill the gap by composing it with a codec from JsonObject to/from JsonValue.\n\nFor DUs that carry no data, a function is still necessary:\n*)\n\ntype CompassDirection =\n    | North\n    | East\n    | South\n    | West\n    with\n        static member JsonObjCodec =\n            jchoice\n                [\n                    (fun () -\u003E North) \u003C!\u003E jreq \u0022north\u0022 (function North -\u003E Some () | _ -\u003E None)\n                    (fun () -\u003E South) \u003C!\u003E jreq \u0022south\u0022 (function South -\u003E Some () | _ -\u003E None)\n                    (fun () -\u003E East) \u003C!\u003E jreq \u0022east\u0022 (function East -\u003E Some () | _ -\u003E None)\n                    (fun () -\u003E West) \u003C!\u003E jreq \u0022west\u0022 (function West -\u003E Some () | _ -\u003E None)\n                ]\n\n\n(**\nA common way to represent algebraic data types in JSON is to use a type tag.\nFor example:\n**)\n\nlet someShapes = \u0022\u0022\u0022\n[\n    {\n        \u0022type\u0022: \u0022rectangle\u0022,\n        \u0022width\u0022: 8.8,\n        \u0022length\u0022: 12.0\n    },\n    {\n        \u0022type\u0022: \u0022circle\u0022,\n        \u0022radius\u0022: 37.8\n    },\n    {\n        \u0022type\u0022: \u0022prism\u0022,\n        \u0022width\u0022: [10.0, 23.0],\n        \u0022height\u0022: 9.10\n    }\n]\n\u0022\u0022\u0022\n\nopen FSharpPlus\nopen FSharpPlus.Operators\n\ntype ShapeD =\n    | Rectangle of width : float * length : float\n    | Circle of radius : float\n    | Prism of width : float * float * height : float\n    with\n        static member JsonObjCodec =\n            /// Derives a concrete field codec for a required field and value\n            let inline jreqValue prop value codec =\n                let matchPropValue o =\n                     match IReadOnlyDictionary.tryGetValue prop o with\n                     | Some a when (ofJson a) = Ok value -\u003E Ok o\n                     | Some a -\u003E Decode.Fail.invalidValue a value\n                     | None -\u003E Decode.Fail.propertyNotFound prop o\n                Codec.ofConcrete codec\n                |\u003E Codec.compose (\n                                    matchPropValue,\n                                    fun encoded -\u003E\n                                      if encoded.Count=0 then encoded // we have not encoded anything so no need to add property and value \n                                      else IReadOnlyDictionary.union (Dict.toIReadOnlyDictionary (dict [prop, toJson value])) encoded\n                                 )\n                |\u003E Codec.toConcrete\n\n\n            jchoice\n                [\n                    fun w l -\u003E Rectangle (w,l)\n                    \u003C!\u003E jreq \u0022width\u0022 (function Rectangle(w, _) -\u003E Some w | _ -\u003E None)\n                    \u003C*\u003E jreq \u0022length\u0022 (function Rectangle(_, l) -\u003E Some l | _ -\u003E None)\n                    |\u003E jreqValue \u0022type\u0022 \u0022rectangle\u0022\n\n                    Circle\n                    \u003C!\u003E jreq \u0022radius\u0022 (function Circle (r) -\u003E Some r | _ -\u003E None)\n                    |\u003E jreqValue \u0022type\u0022 \u0022circle\u0022\n\n                    fun (w,w2) h -\u003E Prism (w,w2,h)\n                    \u003C!\u003E jreq \u0022width\u0022 (function Prism (x, y, _) -\u003E Some (x, y) | _ -\u003E None)\n                    \u003C*\u003E jreq \u0022height\u0022 (function Prism (_, _, h) -\u003E Some h | _ -\u003E None)\n                    |\u003E jreqValue \u0022type\u0022 \u0022prism\u0022\n                ]\n\nlet parsedShapedD = parseJson\u003CShapeD list\u003E someShapes\n\n(**\nWe can manipulate codecs by using functions in the Codec module. Here\u0027s an example:\n*)\nopen System.Text\nlet pf : PersonF= {name = (\u0022John\u0022, \u0022Doe\u0022); age = None; children = [{name = (\u0022Johnny\u0022, \u0022Doe\u0022); age = Some 21; children = []}]}\n\nlet personBytesCodec =\n    let getString (bytes:byte array) = Encoding.UTF8.GetString bytes\n    PersonF.JsonObjCodec\n    |\u003E Codec.compose jsonObjToValueCodec    // this is the codec that fills the gap to/from JsonValue\n    |\u003E Codec.compose jsonValueToTextCodec   // this is a codec between JsonValue and JsonText\n    |\u003E Codec.invmap getString Encoding.UTF8.GetBytes    // This is a pair of of isomorphic functions\n\nlet bytePerson = Codec.encode personBytesCodec pf\n// val bytePerson : byte [] = [|123uy; 13uy; 10uy; 32uy; 32uy; ... |]\nlet p\u0027 = Codec.decode personBytesCodec bytePerson\n\n(**\nWhile if the type of codec is concrete then we need to convert it to before composing it\n*)\n\nlet personBytesCodec2 =\n    let getString (bytes:byte array) = Encoding.UTF8.GetString bytes\n    Person.JsonObjCodec\n    |\u003E Codec.ofConcrete\n    |\u003E Codec.compose jsonObjToValueCodec    // this is the codec that fills the gap to/from JsonValue\n    |\u003E Codec.compose jsonValueToTextCodec   // this is a codec between JsonValue and JsonText\n    |\u003E Codec.invmap getString Encoding.UTF8.GetBytes    // This is a pair of of isomorphic functions"},{"uri":"/Fleece/combinators.html","title":"combinators","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: System.Json, 4.7.1\u0022\n#r \u0022nuget: FSharpPlus, 1.2.2\u0022\n#r @\u0022../../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\nopen Fleece.SystemJson\n\n(**\n\u0060\u0060\u0060f#\n#r \u0022nuget: Fleece.SystemJson\u0022\nopen Fleece.SystemJson\n\u0060\u0060\u0060\n\n## Combinators\n\nSo far we\u0027ve seen how Fleece is capable of encoding/decoding by deriving automatically a codec from static members in the type.\n\nBut for those cases where we don\u0027t have control over the types (extension members won\u0027t be taken into account) we can explicitly specify combinators.\n\nTo do so, a set of the available functions exists, ending with the \u0060With\u0060 suffix, which accepts a combinator as first parameter:\n\n*)\n\n\ntype Color = Red | Blue | White\n\ntype Car = {\n    Id : string\n    Color : Color\n    Kms : int }\n\nlet colorDecoder = function\n    | JString \u0022red\u0022   -\u003E Decode.Success Red\n    | JString \u0022blue\u0022  -\u003E Decode.Success Blue\n    | JString \u0022white\u0022 -\u003E Decode.Success White\n    | JString  x as v -\u003E Decode.Fail.invalidValue v (\u0022Wrong color: \u0022 \u002B x)\n    | x               -\u003E Decode.Fail.strExpected  x\n\nlet colorEncoder = function\n    | Red   -\u003E JString \u0022red\u0022\n    | Blue  -\u003E JString \u0022blue\u0022\n    | White -\u003E JString \u0022white\u0022\n\nlet colorCodec = colorDecoder, colorEncoder\n\nlet [\u003CGeneralizableValue\u003E]carCodec\u003C\u0027t\u003E =\n    fun i c k -\u003E { Id = i; Color = c; Kms = k }\n    |\u003E withFields\n    |\u003E jfieldWith JsonCodec.string \u0022id\u0022    (fun x -\u003E x.Id)\n    |\u003E jfieldWith colorCodec       \u0022color\u0022 (fun x -\u003E x.Color)\n    |\u003E jfieldWith JsonCodec.int    \u0022kms\u0022   (fun x -\u003E x.Kms)\n    |\u003E Codec.compose jsonObjToValueCodec\n\nlet car = { Id = \u0022xyz\u0022; Color = Red; Kms = 0 }\n\nlet jsonCar = Codec.encode carCodec car\n// val jsonCar : JsonValue = {\u0022id\u0022: \u0022xyz\u0022, \u0022color\u0022: \u0022red\u0022, \u0022kms\u0022: 0}"},{"uri":"/Fleece/comparison-with-json-net.html","title":"comparison-with-json-net","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: Newtonsoft.Json, 10.0.2\u0022\n#r \u0022nuget: FSharpPlus, 1.2.2\u0022\n#r @\u0022../../src/Fleece.NewtonsoftJson/bin/Release/netstandard2.1/Fleece.NewtonsoftJson.dll\u0022\n\n(**\n\u0060\u0060\u0060f#\n#r \u0022nuget: Fleece.NewtonsoftJson\u0022\n\u0060\u0060\u0060\n*)\n\nopen System\nopen Newtonsoft.Json\nopen FSharpPlus\nopen Fleece.Newtonsoft\nopen Fleece.Newtonsoft.Operators\n\n(**\n## Comparison with Json.Net or Newtonsoft Json\n\nIn order to be compatible with Newtonsoft Json conventions you need to either specify a constructor or have a default constructor with the same name as the public field\n(note the different first letter casing).\n*)\n\ntype User(userName:string , enabled: bool)=\n    member __.UserName = userName\n    member __.Enabled = enabled\nlet userJson=\u0022\u0022\u0022\n{\u0022userName\u0022:\u0022test\u0022,\u0022enabled\u0022:true}\n\u0022\u0022\u0022\nlet user = JsonConvert.DeserializeObject\u003CUser\u003E userJson\n(**\nAnother alternative would be to use CLI-mutable\n*)\n[\u003CCLIMutable\u003E]\ntype UserR ={ UserName:string; Enabled:bool }\n(**\nThis enables Json.Net to deserialize json into your structure but leave the F# code easier to reason about.\n*)\nlet userRecord = JsonConvert.DeserializeObject\u003CUserR\u003E userJson\n(**\n### Controlling polymorphism\n\nThe default approach is to use [serialization binder](https://www.newtonsoft.com/json/help/html/SerializeSerializationBinder.htm). The assumption is that you have an abstract class or an interface that implemented by many different types.\n\nIn order to have a better serialization of union cases you need to implement something as seen in [FsCodec.NewtonsoftJson/UnionConverter](https://github.com/jet/FsCodec/blob/2bdcd60c04588c81caecbea6e5507348c4763fd9/src/FsCodec.NewtonsoftJson/UnionConverter.fs).\n\nSince UnionConverter does not map well to F# concepts you might end up with a similar pattern as seen in Fleece. For instance if you read [Eirik Tsarpalis blog](https://eiriktsarpalis.wordpress.com/2018/10/30/a-contract-pattern-for-schemaless-datastores/).\n\nFleece lets you decode the Json at both a lower and hight level. This allows you also to mix and match with the native Json library (in this case Newtonsoft.Json):\n*)\n[\u003CCLIMutable\u003E]\ntype CarInfo = { Make:string; Model:string; Trim:string}\ntype Vehicle =\n   | Bike\n   | Car       of CarInfo\nwith\n    static member OfJson (json:Linq.JToken) =\n        match json with\n        | JObject o -\u003E\n            monad.strict {\n                match! o .@ \u0022type\u0022 with\n                | \u0022Bike\u0022 -\u003E return Bike\n                | \u0022Car\u0022 -\u003E\n                    // we know that json token is a JObject due to the check above so we can directly cast it:\n                    let jobj : Linq.JObject = downcast json\n                    try\n                        // now we can use the default Newtonsoft Json decoder:\n                        let info = jobj.ToObject\u003CCarInfo\u003E() // NOTE: here we hand over control of the mapping to Newtonsoft.Json\n                        return Car info\n                    with\n                    | e-\u003E return! Decode.Fail.parseError e \u0022Could not parse CarInfo\u0022\n                | x -\u003E return! Uncategorized (sprintf \u0022Unexpected type name %s\u0022 x) |\u003E Error\n            }\n        | x -\u003E Decode.Fail.objExpected x\n(**\nThis pattern is *ugly* but can be useful. Modifying the type CarInfo above will give you runtime exceptions without a clear indication that it\u0027s a broken contract.\n\nOne of the useful things about having a mixed approach as seen above is that you can gradually convert to say Fleece in a large codebase without having to fix everything at once.\n*)\n\n(**\n## Full control over mapping\n\nThe default approach to serialization and deserialization in Fleece let you have a lot of control. You choose exactly how it should work.\n\nIt\u0027s easy to let the structure of your Json be completely independent of the structure of your data. Newtonsoft assumes that what you want follow a lot of conventions.\n\nIf we look at a simple example of the Json not matching the representation (where you would need a custom JsonConverter):\n*)\n\ntype Person = {\n    Name : string * string\n}\nwith\n    static member ToJson (x: Person) =\n        jobj [\n            \u0022firstname\u0022 .= fst x.Name\n            \u0022lastname\u0022 .= snd x.Name\n        ]\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E\n            let firstname = jget o \u0022firstname\u0022\n            let lastname = jget o \u0022lastname\u0022\n            match firstname, lastname with\n            | Decode.Success firstname, Decode.Success lastname -\u003E\n                Decode.Success {\n                    Person.Name = (firstname,lastname)\n                }\n            | x -\u003E Error \u003C| Uncategorized (sprintf \u0022Error parsing person: %A\u0022 x)\n        | x -\u003E Decode.Fail.objExpected x\n\n(**\nIn that sense, having access to functions helps us make what in Newtonsoft is a pain to implement, very easy.\n*)"},{"uri":"/Fleece/further-techniques.html","title":"further-techniques","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: System.Json, 4.7.1\u0022\n#r \u0022nuget: FSharpPlus, 1.2.2\u0022\n#r @\u0022../../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n\n(**\nSometimes, the JSON required by a given situation will contain fields that do not need to be present in the F# data model.\nFor example, the JSON-RPC 2.0 specification requires every request/response object to carry the field \u0060jsonrpc\u0060 with value \u0060\u00222.0\u0022\u0060.\nIn a codebase that only uses JSON-RPC 2.0, why capture this field on a record?\n\nWhen writing \u0060ToJson\u0060 and \u0060OfJson\u0060 methods for this data, handling the required field is fairly natural:\n\n*)\n\ntype Request =\n    { Method: string\n      MethodParams: Map\u003Cstring, string\u003E}\n    static member ToJson (r: Request) =\n        jobj [\n            \u0022method\u0022  .= r.Method\n            \u0022params\u0022  .= r.MethodParams\n            \u0022jsonrpc\u0022 .= \u00222.0\u0022\n        ]\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E\n            let method = o .@ \u0022method\u0022\n            let methodParams = o .@ \u0022params\u0022\n            // We require the \u0022jsonrpc\u0022 field to be present\n            let jsonrpc = o .@ \u0022jsonrpc\u0022\n            match method, methodParams, jsonrpc with\n            | Decode.Success m, Decode.Success p, Decode.Success \u00222.0\u0022 -\u003E // We enforce the value of the field\n                // ...but do not use it in the final object\n                Decode.Success {\n                    Method = m\n                    MethodParams = p\n                }\n            | x -\u003E Error \u003C| Uncategorized (sprintf \u0022Error parsing person: %A\u0022 x)\n        | x -\u003E Decode.Fail.objExpected x\n\n(**\nThis can also be modeled with Codecs:\n*)\n\ntype Response =\n    { Result: string option\n      Error: string option }\n      static member JsonObjCodec =\n          fun r e _ -\u003E { Result = r; Error = e }\n          |\u003E withFields\n          |\u003E jfieldOpt \u0022result\u0022  (fun r -\u003E r.Result)\n          |\u003E jfieldOpt \u0022error\u0022   (fun r -\u003E r.Error)\n          |\u003E jfield    \u0022jsonrpc\u0022 (fun _ -\u003E \u00222.0\u0022)\n\n(**\nThere are three parts to this.\nFirst, the constructor is given an unused third parameter, which will receive the field required on the JSON object.\nSecond, the \u0060\u0022jsonrpc\u0022\u0060 field is required using \u0060jfield\u0060; its getter always returns \u0060\u00222.0\u0022\u0060\nFinally: the fields must be in the correct order -- that is, the field specs must follow the order of the arguments in the constructor.\n*)"},{"uri":"/Fleece/giraffe.html","title":"giraffe","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: System.Json, 4.7.1\u0022\n#r \u0022nuget: FSharpPlus, 1.2.2\u0022\n#r \u0022nuget: TaskBuilder.fs, 2.1.0\u0022\n#r @\u0022../../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\nmodule Giraffe=\n    open System.Threading.Tasks\n    open System.IO\n    /// fake definition\n    type Request()=\n        member __.Body:Stream = failwith \u0022not implemented\u0022\n    type HttpContext ()=\n        member __.Request : Request=failwith \u0022not implemented\u0022\n        member __.SetContentType(s:string)=failwith \u0022not implemented\u0022\n        member __.WriteBytesAsync(b:byte array) : Task\u003CHttpContext option\u003E =failwith \u0022not implemented\u0022\n\n    type HttpFuncResult = Task\u003CHttpContext option\u003E\n\n    type HttpFunc = HttpContext -\u003E HttpFuncResult\n\n    type HttpHandler = HttpFunc -\u003E HttpFunc\n\n\n(**\n## Giraffe\n\nIn this page we will get an overview of how you can use Fleece together with Giraffe.\n\nA minimal integration can be done by looking at how Giraffe implements the method [WriteJsonAsync](https://github.com/giraffe-fsharp/Giraffe/blob/37e69a54d1e85649968705f13cab77abe2d0a928/src/Giraffe/ResponseWriters.fs#L53-L57) and function [json](https://github.com/giraffe-fsharp/Giraffe/blob/37e69a54d1e85649968705f13cab77abe2d0a928/src/Giraffe/ResponseWriters.fs#L186-L188):\n\n*)\n\nopen Giraffe\nopen System.IO\nopen System.Text\n// task computation builder from TaskBuilder.fs:\nopen FSharp.Control.Tasks.V2.ContextInsensitive\n// Fleece and Json related:\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n\nmodule BusinessApp=\n    module Json =\n        let inline json (dataObj ) : HttpHandler =\n            fun (_ : HttpFunc) (ctx : HttpContext) -\u003E\n                ctx.SetContentType \u0022application/json; charset=utf-8\u0022\n                toJson dataObj // turn dataObj into Json\n                |\u003E string // get the Json string\n                |\u003E Encoding.UTF8.GetBytes // turn the string into bytes\n                |\u003E ctx.WriteBytesAsync // write bytes to the response\n\n        let inline bindJsonAsync (ctx : HttpContext) =\n            task {\n                use reader = new StreamReader(ctx.Request.Body)\n                let! body = reader.ReadToEndAsync()\n                return parseJson body\n            }\n\n(**\nIn the web API part of your business app you would then do something like the code below:\n*)\n\nopen Giraffe\nopen FSharp.Control.Tasks.V2.ContextInsensitive\n// we open the Json helpers we defined last in order to avoid using the default \u0022json\u0022 function from Giraffe:\nopen BusinessApp.Json\ntype Person = { Name : string }\nwith\n    static member JsonObjCodec =\n        fun name -\u003E { Name = name }\n        \u003C!\u003E jreq  \u0022name\u0022 (Some \u003C\u003C fun x -\u003E x.Name)\n\nlet personHandler =\n    fun (next : HttpFunc) (ctx : HttpContext) -\u003E\n        task {\n            match! bindJsonAsync ctx with // instead of using ctx.BindJsonAsync we use the function above\n            | Ok (person:Person)-\u003E\n                return! json person next ctx\n            // and ideally we would deal with case when the parsing fails as well\n        }\n\n(**\nThe benefit of doing an integration in this way is:\n\n- You get a compilation error when trying to use types that don\u0027t have the proper functions defined.\n- You avoid having to use runtime reflection to bind and serialize the Json.\n- You have more control over the serialization than with System.Text.Json or Newtonsoft.Json\n*)"},{"uri":"/Fleece/index.html","title":"Fleece\r\n","content":"Fleece\r\n======\r\n\r\nFleece is a library intended to help with parsing and crafting specific JSON without having to write data transfer objects in order to get the expected\r\nrepresentation.\r\n\r\n### Introduction\r\n\r\nYou can get an overview of the important part of the library by reading the following pages:\r\n\r\n - [ToJson and OfJson](./to-json-and-of-json.html) are the basic building blocks\r\n - [Codec](./codec.html) let\u0027s you combine both ToJson and OfJson in one declaration\r\n - [Combinators](./combinators.html) lets you have more control\r\n - [Further Techniques](./further-techniques.html) describes ways of solving various JSON-wrangling problems\r\n\r\n### Integration with Web frameworks\r\n\r\nIn order to use Fleece mappings in your Web API you might follow one of the below guides:\r\n\r\n - [Giraffe](./giraffe.html)\r\n - [Suave](./suave.html)\r\n"},{"uri":"/Fleece/license.html","title":"license","content":"Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \u0022License\u0022 shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \u0022Licensor\u0022 shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \u0022Legal Entity\u0022 shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \u0022control\u0022 means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \u0022You\u0022 (or \u0022Your\u0022) shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \u0022Source\u0022 form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \u0022Object\u0022 form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \u0022Work\u0022 shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \u0022Derivative Works\u0022 shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \u0022Contribution\u0022 shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \u0022submitted\u0022\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \u0022Not a Contribution.\u0022\r\n\r\n      \u0022Contributor\u0022 shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \u0022NOTICE\u0022 text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \u0022AS IS\u0022 BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \u0022{}\u0022\r\n      replaced with your own identifying information. (Don\u0027t include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \u0022printed page\u0022 as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright {yyyy} {name of copyright owner}\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n\r\n"},{"uri":"/Fleece/release-notes.html","title":"release-notes","content":"#### 0.9.0  - October 28 2021\r\n* Added Result codec and overload\r\n* Fix problem decoding null values into Options.\r\n* Fix parsing of floats for infinities and nan.\r\n* Fix parsing of Datetime when using newtonsoft.json\r\n\r\n#### 0.8.0  - May 17 2020\r\n* Added System.Text.Json implementation\r\n* Support for enums and all tuple sizes\r\n* Fix: error reporting wrong index in 7-uples\r\n* FSharpData use its own type for JsonObject\r\n* Added missing ofJson/toJson support for JsonValue and JsonObject\r\n* Upgrade to FSharpPlus 1.1.1\r\n\r\n#### 0.7.0  - September 27 2018\r\n* Json Lens\r\n* Codecs\r\n* Combinators\r\n* Upgrade to System.Json 4.5\r\n* Fix somes issue with Newtonsoft serialization\r\n* Breaking changes: Success and Failure functions moved to Helpers namespace\r\n* Breaking changes from 0.6.1 : encode, decode, mapping, jgetopt, jpairopt, jfieldopt functions\r\n\r\n#### 0.6.1  - September 5 2018\r\n* Codec support for Json Objects\r\n\r\n#### 0.6.0 August 23 2018\r\n* Breaking change for Newtonsoft and FSharp.Data: use a specific module\r\n* Binary Breaking Change: use Result\u003C_,_\u003E instead of Choice\u003C_,_\u003E\r\n\r\n#### 0.5.1  - December 31 2017\r\n* Lock System.Json\r\n* Bug fixes in Newtonsoft implementation\r\n\r\n#### 0.5.0  - May 27 2018\r\n* Added FSharp.Data implementation\r\n* Netstandard support\r\n* Friendlier API (non-breaking)\r\n* Null keys are filtered out in JSON objects\r\n* Updated dependencies\r\n\r\n#### 0.4.0  - September 9 2014\r\n* Added FSharp.Data implementation\r\n* Support for milliseconds in json dates\r\n\r\n#### 0.3.0  - July 31 2014 \r\n* Support for Guid, Dictionary and ResizeArray\r\n* Deserialization added for JsonObject\r\n* Updated dependecies\r\n\r\n#### 0.2.0  - April 9 2014\r\n* Support for Map and Nullable\r\n* More Xml docs\r\n* Minor optimizations\r\n\r\n#### 0.1.0  - January 20 2014\r\n* Initial release\r\n"},{"uri":"/Fleece/suave.html","title":"suave","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: System.Json, 4.7.1\u0022\n#r \u0022nuget: FSharpPlus, 1.2.2\u0022\n#r \u0022nuget: Suave, 2.5.6\u0022\n#r @\u0022../../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\n(**\n## Suave\n\nIn this page we will get an overview of how you can use Fleece together with Suave.\n\nA minimal integration can be done by\n\n*)\n\nopen Suave\nopen Suave.Http\nopen Suave.Operators\nopen System.IO\nopen System.Text\n// Fleece and Json related:\nopen System.Json\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n\nmodule BusinessApp=\n    [\u003CRequireQualifiedAccess\u003E]\n    module Json =\n        let inline OK (dataObj) : WebPart=\n            let str = toJson dataObj |\u003E string\n            Successful.OK str\n            \u003E=\u003E Writers.setMimeType \u0022application/json; charset=utf-8\u0022\n\n        let inline parseRequestForm (ctx : HttpContext) =\n            let body = ctx.request.rawForm |\u003E Encoding.UTF8.GetString\n            parseJson body\n\n(**\nIn the web API part of your business app you would then do something like the code below:\n*)\n\nopen BusinessApp\n\ntype Person = { Name : string }\nwith\n    static member JsonObjCodec =\n        fun name -\u003E { Name = name }\n        \u003C!\u003E jreq  \u0022name\u0022 (Some \u003C\u003C fun x -\u003E x.Name)\n\nlet personHandler : WebPart =\n    warbler (fun ctx -\u003E\n            match Json.parseRequestForm ctx with // instead of using mapJson\n            | Ok (person:Person)-\u003E\n                Json.OK person\n            // and ideally we would deal with case when the parsing fails as well\n    )"},{"uri":"/Fleece/to-json-and-of-json.html","title":"to-json-and-of-json","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: System.Json, 4.7.1\u0022\n#r \u0022nuget: FSharpPlus, 1.2.2\u0022\n#r @\u0022../../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\nopen System.Json\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n#if FSHARPDATA\n#r \u0022nuget: FSharp.Data, 3.0.0\u0022\n#r @\u0022../../src/Fleece.FSharpData/bin/Release/netstandard2.1/Fleece.FSharpData.dll\u0022\n\nopen FSharp.Data\nopen Fleece.FSharpData\nopen Fleece.FSharpData.Operators\n#endif\n(**\n## ToJson and OfJson\n\nIn order to parse or encode instances into Json you can define static members\n\nFor example, given this data type:\n*)\n\n\ntype Person = {\n    Name: string\n    Age: int\n    Children: Person list\n}\n\n(**\nYou can map it to JSON like this:\n*)\n\n\ntype Person with\n    static member ToJson (x: Person) =\n        jobj [\n            \u0022name\u0022 .= x.Name\n            \u0022age\u0022 .= x.Age\n            \u0022children\u0022 .= x.Children\n        ]\n\nlet p =\n    { Person.Name = \u0022John\u0022\n      Age = 44\n      Children =\n      [\n        { Person.Name = \u0022Katy\u0022\n          Age = 5\n          Children = [] }\n        { Person.Name = \u0022Johnny\u0022\n          Age = 7\n          Children = [] }\n      ] }\n\nprintfn \u0022%s\u0022 (string (toJson p))\n\n(**\nAnd you can map it from JSON like this:\n*)\n\ntype Person with\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E\n            let name = o .@ \u0022name\u0022\n            let age = o .@ \u0022age\u0022\n            let children = o .@ \u0022children\u0022\n            match name, age, children with\n            | Decode.Success name, Decode.Success age, Decode.Success children -\u003E\n                Decode.Success {\n                    Person.Name = name\n                    Age = age\n                    Children = children\n                }\n            | x -\u003E Error \u003C| Uncategorized (sprintf \u0022Error parsing person: %A\u0022 x)\n        | x -\u003E Decode.Fail.objExpected x\n\nlet john : Person ParseResult = parseJson \u0022\u0022\u0022{\n    \u0022name\u0022: \u0022John\u0022,\n    \u0022age\u0022: 44,\n    \u0022children\u0022: [{\n        \u0022name\u0022: \u0022Katy\u0022,\n        \u0022age\u0022: 5,\n        \u0022children\u0022: []\n    }, {\n        \u0022name\u0022: \u0022Johnny\u0022,\n        \u0022age\u0022: 7,\n        \u0022children\u0022: []\n    }]\n}\u0022\u0022\u0022\n\n(**\nThough it\u0027s much easier to do this in a monadic or applicative way. For example, using [FSharpPlus](https://github.com/fsprojects/FSharpPlus) (which is already a dependency of Fleece):\n*)\n\nopen FSharpPlus\n\ntype PersonAp = {\n    Name: string\n    Age: int\n    Children: PersonAp list\n}\n\ntype PersonAp with\n    static member Create name age children = { PersonAp.Name = name; Age = age; Children = children }\n\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E PersonAp.Create \u003C!\u003E (o .@ \u0022name\u0022) \u003C*\u003E (o .@ \u0022age\u0022) \u003C*\u003E (o .@ \u0022children\u0022)\n        | x -\u003E Decode.Fail.objExpected x\n\n(**\n\nOr monadically:\n*)\n\ntype PersonM = {\n    Name: string\n    Age: int\n    Children: PersonM list\n}\n\ntype PersonM with\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E\n            monad {\n                let! name = o .@ \u0022name\u0022\n                let! age = o .@ \u0022age\u0022\n                let! children = o .@ \u0022children\u0022\n                return {\n                    Person.Name = name\n                    Age = age\n                    Children = children\n                }\n            }\n        | x -\u003E Decode.Fail.objExpected x\n\n(**\nOr you can use the Choice monad/applicative in [FSharpx.Extras](https://github.com/fsprojects/FSharpx.Extras) instead, if you prefer.\n\nYou can see more examples in the [EdmundsNet](https://github.com/mausch/EdmundsNet) project.\n*)"}]